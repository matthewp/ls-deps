#!/usr/bin/env node
var path = require('path');
var argv = require('yargs')
  .usage('Get all dependencies of a project')
  .example('$0 app/app', 'Display the dependency tree for app/app')
  .default('depth', 3)
  .describe('config', 'A module used to configure the loader')
  .describe('base-url', 'The root folder used to load modules from')
  .describe('depth', 'The depth of modules to show')
  .describe('inverse', 'Show all of the modules that are dependants on N')
  .version(require('../package.json').version, 'version')
  .argv;

var main = removeJs(argv._[0]);

var makeGraph = require('steal-tools').graph.make;
var logger = require('steal-tools/lib/logger');
var system = {};

if(main) {
  system.main = main;
}

system.config = argv.config || path.join(process.cwd(), "/package.json") + "!npm";

if(argv.baseUrl) {
  system.baseURL = argv.baseUrl;
}

logger.setup({ quiet: true }, system);

makeGraph(system).then(function(data){
  var fn = argv.inverse ? reverseDisplay : display;
  main = main || data.steal.System.main;
  fn(data.graph, main);
}, function(err) {
  console.log(err, err.stack);
  console.error('Oops! Unable to display the dependencies and we don\'t know why. Please file an issue and let us know: https://github.com/matthewp/ls-deps/issues/new');
});

function reverseDisplay(graph, main) {
  var masters = [];
  var child = argv.inverse;

  for(var p in graph) {
    if(p !== main) {
      find(p, graph[p]);
    }
  }

  masters.forEach(function(dep, i) {
    console.log(branch(masters.length, i), dep);
  });

  function find(name, node) {
    var deps = node.dependencies || [];
    if(~deps.indexOf(child)) {
      masters.push(name);
    }
  }
}

function indenter(offset) {
  var out = '';
  for(var i = 0; i < offset; i++) {
    out += (i % 2) ? ' ' : '|';
  }
  return out;
}

function display(graph, dep, offset, depth) {
  offset = offset || 0;
  depth = depth || 1;

  if(depth > argv.depth) {
    return;
  }

  var node = graph[dep];
  var indent = indenter(offset);

  var deps = node.dependencies;
  deps.forEach(function(dep, i) {
    var node = graph[dep];
    var lastThingy = (depth === argv.depth || !node || !node.dependencies.length)
      ? '─' : '┬';
    console.log(indent + branch(deps.length, i) + lastThingy + ' ' + dep);

    if(node) {
      display(graph, dep, offset + 2, depth + 1);
    }
  });
}

function branch(leaves, leaf) {
  return leaf !== (leaves - 1) ? '├─' : '└─';
}

function removeJs(name) {
  if(typeof name === "undefined") return name;
  var idx = name.indexOf('.js');
  var len = name.length;
  if(idx === (len - 3)) {
    return name.substr(0, len - 3);
  }
  return name;
}
