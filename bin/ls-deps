#!/usr/bin/env node
var argv = require('yargs')
  .usage('Get all dependencies of a project')
  .example('$0 --config config app/app', 'Use config to get the dependencies for app/app')
  .required(1, 'Must provide a module to fetch dependencies for')
  .boolean('steal')
  .default('depth', 3)
  .describe('config', 'A module used to configure the loader')
  .describe('base-url', 'The root folder used to load modules from')
  .describe('depth', 'The depth of modules to show')
  .describe('inverse', 'Show all of the modules that are dependants on N')
  .describe('steal', 'A Steal based project')
  .version(require('../package.json').version, 'version')
  .argv;

var main = argv._[0];

var DependencyGraph = require('dependencygraph' + (argv.steal ? '-steal' : ''));

var dependencyGraph = DependencyGraph();

if(argv.config) {
  dependencyGraph.config(argv.config);
}

if(argv.baseUrl) {
  dependencyGraph.root(argv.baseUrl);
}

dependencyGraph.for([main]).then(function(graph) {
  var fn = argv.inverse ? reverseDisplay : display;
  fn(graph, main);
}, function(err) {
  console.error('Oops! Unable to display the dependencies and we don\'t know why. Please file an issue and let us know: https://github.com/matthewp/ls-deps/issues/new');
});

function reverseDisplay(graph, main) {
  var masters = [];
  var child = argv.inverse;

  for(var p in graph) {
    if(p !== main) {
      find(p, graph[p]);
    }
  }

  masters.forEach(function(dep, i) {
    console.log(branch(masters.length, i), dep);
  });

  function find(name, node) {
    var deps = node.dependencies || [];
    if(~deps.indexOf(child)) {
      masters.push(name);
    }
  }
}

function indenter(offset) {
  var out = '';
  for(var i = 0; i < offset; i++) {
    out += (i % 2) ? ' ' : '|';
  }
  return out;
}

function display(graph, dep, offset, depth) {
  offset = offset || 0;
  depth = depth || 1;

  if(depth > argv.depth) {
    return;
  }

  var node = graph[dep];
  var indent = indenter(offset);

  var deps = node.dependencies;
  deps.forEach(function(dep, i) {
    var node = graph[dep];
    var lastThingy = (depth === argv.depth || !node || !node.dependencies.length)
      ? '─' : '┬';
    console.log(indent + branch(deps.length, i) + lastThingy + ' ' + dep);

    if(node) {
      display(graph, dep, offset + 2, depth + 1);
    }
  });
}

function branch(leaves, leaf) {
  return leaf !== (leaves - 1) ? '├─' : '└─';
}
